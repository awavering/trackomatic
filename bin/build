#!/usr/bin/env node
require('console.table')

var fs       = require('fs')
var path     = require('path')
var Webpack  = require('webpack')
var prompt   = require('prompt')
var exec     = require('child_process').exec
var project  = require('../package')
var colors   = require('colors')
var spin     = require('io-spin')
var async    = require('async')
var rmdir    = require('rimraf')

// library
var rootPath        = path.join(__dirname, '..')
var publicDirPath   = path.join(rootPath, 'public')
var latestDirPath   = path.join(rootPath, 'public', 'latest')
var currentDirPath  = path.join(rootPath, 'public', project.version)
var relativePath    = path.relative(publicDirPath, currentDirPath)

// docs
var latestDocsPath   = path.join(rootPath, 'docs')
var currentDocsPath  = path.join(currentDirPath, 'docs')
var relativeDocsPath = path.relative(rootPath, currentDocsPath)

var now = new Date().getTime()

/**
 * Build entry point.
 *
 * Begin by checking whether the path to `public/<version>` exists, if so
 * prompt for confirmation to overwrite current build.
 **/
fs.stat(currentDirPath, function(err, data) {
  // folder does not exist, proceed to build step
  if (err) {
    build()

  // folder already exists, prompt for permission to overwrite
  } else {
    console.log(
      'The folder "/public/' + project.version + '" already exists. \
       Are you absolutely sure you want to overwrite it with the current build?'
     )

    prompt.message = "Overwrite?".yellow
    prompt.delimiter = " "

    prompt.start()

    prompt.get({
      properties: {
        proceed: {
          description: 'Y'.green + '/' + 'N'.red
        }
      }
    }, function(err, result) {
      if (err) {
        console.log(
          'Prompt Error: Whoops, something went wrong receiving \
           user input. Try running this script again.'
         )
      }

      if (/[y]/i.test(result.proceed)) {
        build()
      } else {
        console.log('✘'.bold.red + ' Build cancelled. Have a nice life.')
        process.exit()
      }
    })
  }
})

/**
 * Triggers the build steps
 **/
function build() {
  console.log('Building ' + colors.bold(project.version) + ' ...')

  spin.start('Compiling: ', 'Box7')

  async.series([
    execWebpack,
    execWebpackProduction,
    generateDocs,
    symlinkDocs,
    symlink,
    report,
  ], function(err, results) {
    if (err) {
      console.log(err)
      process.exit()
    }
  })
}

/**
 * Executes `npm run webpack`
 **/
function execWebpack(callback) {
  exec('npm run webpack', function(err, stdout, stderr) {
    if (err) {
      var error = '✘'.bold.red + ' Build Error: There was \
                   a problem executing `npm run webpack`.'

      return callback(error)
    }

    callback(null, stdout)
  })
}

/**
 * Executes `NODE_ENV=production npm run webpack:production`
 **/
function execWebpackProduction(callback) {
  exec('npm run webpack:production', function(err, stdout, stderr) {
    if (err) {
      var error = '✘'.bold.red + ' Build Error: There was a problem \
                   executing `npm run webpack:production`.'

      return callback(error)
    }

    callback(null, stdout)
  })
}

/**
 * Executes esdoc via `npm run docs`
 **/
function generateDocs(callback) {
  exec('npm run docs', function(err, stdout, stderr) {
    if (err) {
      var error =  '✘'.bold.red + ' Build Error: There was a problem \
                    executing `npm run docs`.'

      return callback(error)
    }

    callback(null, stdout)
  })
}


/**
 * Prepare public folder for deployment by symlinking 'latest'
 * to the most recent build of Trackomatic
 **/
function symlinkDocs(callback) {
  fs.lstat(latestDocsPath, function(err, stats) {
    // if the 'latest' directory doesn't exist, err will be truthy
    if (!err) {
      // remove/unlink the file/symlink
      if (stats.isSymbolicLink() || stats.isFile()) {
        fs.unlinkSync(latestDocsPath)
      // remove directory
      } else {
        fs.rmdirSync(latestDocsPath)
      }
    }

    // then, create a symlink from 'public/latest' to
    // the folder containing the most recent build
    fs.symlink(relativeDocsPath, latestDocsPath, 'dir', function(err) {
      if (err) {
        var error = '✘'.bold.red + ' Build Error: Could not create a \
                     symlink between /docs and ' + currentDocsPath

        return callback(error)
      }

      callback(null, 'Successfully symlinked the docs directory.')
    })
  })
}

/**
 * Prepare public folder for deployment by symlinking 'latest'
 * to the most recent build of Trackomatic
 **/
function symlink(callback) {
  spin.destroy()

  console.log('Symlinking "/public/latest" to  "/public/' + project.version + '" ...')

  fs.lstat(latestDirPath, function(err, stats) {
    // if the 'latest' directory doesn't exist, err will be truthy
    if (!err) {
      // remove/unlink the file/symlink
      if (stats.isSymbolicLink() || stats.isFile()) {
        fs.unlinkSync(latestDirPath)
      // remove directory
      } else {
        fs.rmdirSync(latestDirPath)
      }
    }

    // then, create a symlink from 'public/latest' to
    // the folder containing the most recent build
    fs.symlink(relativePath, latestDirPath, 'dir', function(err) {
      if (err) {
        var error = '✘'.bold.red + ' Build Error: Could not create a symlink \
                     between ' + latestDirPath + ' and ' + currentDirPath

        return callback(error)
      }

      callback(null, 'Successfully symlinked the latest directory.')
    })
  })
}

/**
 * Reports elapsed time and minified file size
 **/
function report(callback) {
  var elapsed = new Date().getTime() - now
  var minFile = path.join(currentDirPath, 'trackomatic.min.js')

  console.log('')
  console.log('✓'.bold.green + ' Done!')

  console.log(
    'Build ' + colors.bold(project.version) +
    ' finished successfully in ' + colors.bold(elapsed) + 'ms.', ''
  )

  reportFileSize(minFile)

  callback(null)
}

/**
 * Logs the filesize and gzipped size in a table to the terminal
 **/
function reportFileSize(file) {
  var size = getFileSizeSync(file)

  getGzipSize(file, function(err, gzippedSize) {
    console.log(file)
    console.log('')

    console.table([{
      'Size': size,
      'Gzipped': gzippedSize
    }])
  })
}

/**
 * Gets filesize using fs.statSync
 **/
function getFileSizeSync(file) {
  var stats = fs.statSync(file)
  return stats.size
}

/**
 * Gets gzipped filesize by executing `gzip -c FILE | wc - c`
 **/
function getGzipSize(file, callback) {
  exec("gzip -c " + file + " | wc -c", function(err, stdout, stderr) {
    callback(err, stdout.trim())
  })
}
